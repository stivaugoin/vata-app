/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root'
import { Route as IndexImport } from './pages/index'
import { Route as IndividualsIndexImport } from './pages/individuals/index'
import { Route as FamiliesIndexImport } from './pages/families/index'
import { Route as IndividualsIndividualIdImport } from './pages/individuals/$individualId'
import { Route as FamiliesFamilyIdImport } from './pages/families/$familyId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const IndividualsIndexRoute = IndividualsIndexImport.update({
  id: '/individuals/',
  path: '/individuals/',
  getParentRoute: () => rootRoute,
} as any)

const FamiliesIndexRoute = FamiliesIndexImport.update({
  id: '/families/',
  path: '/families/',
  getParentRoute: () => rootRoute,
} as any)

const IndividualsIndividualIdRoute = IndividualsIndividualIdImport.update({
  id: '/individuals/$individualId',
  path: '/individuals/$individualId',
  getParentRoute: () => rootRoute,
} as any)

const FamiliesFamilyIdRoute = FamiliesFamilyIdImport.update({
  id: '/families/$familyId',
  path: '/families/$familyId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/families/$familyId': {
      id: '/families/$familyId'
      path: '/families/$familyId'
      fullPath: '/families/$familyId'
      preLoaderRoute: typeof FamiliesFamilyIdImport
      parentRoute: typeof rootRoute
    }
    '/individuals/$individualId': {
      id: '/individuals/$individualId'
      path: '/individuals/$individualId'
      fullPath: '/individuals/$individualId'
      preLoaderRoute: typeof IndividualsIndividualIdImport
      parentRoute: typeof rootRoute
    }
    '/families/': {
      id: '/families/'
      path: '/families'
      fullPath: '/families'
      preLoaderRoute: typeof FamiliesIndexImport
      parentRoute: typeof rootRoute
    }
    '/individuals/': {
      id: '/individuals/'
      path: '/individuals'
      fullPath: '/individuals'
      preLoaderRoute: typeof IndividualsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/families/$familyId': typeof FamiliesFamilyIdRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdRoute
  '/families': typeof FamiliesIndexRoute
  '/individuals': typeof IndividualsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/families/$familyId': typeof FamiliesFamilyIdRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdRoute
  '/families': typeof FamiliesIndexRoute
  '/individuals': typeof IndividualsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/families/$familyId': typeof FamiliesFamilyIdRoute
  '/individuals/$individualId': typeof IndividualsIndividualIdRoute
  '/families/': typeof FamiliesIndexRoute
  '/individuals/': typeof IndividualsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/families'
    | '/individuals'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/families'
    | '/individuals'
  id:
    | '__root__'
    | '/'
    | '/families/$familyId'
    | '/individuals/$individualId'
    | '/families/'
    | '/individuals/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FamiliesFamilyIdRoute: typeof FamiliesFamilyIdRoute
  IndividualsIndividualIdRoute: typeof IndividualsIndividualIdRoute
  FamiliesIndexRoute: typeof FamiliesIndexRoute
  IndividualsIndexRoute: typeof IndividualsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FamiliesFamilyIdRoute: FamiliesFamilyIdRoute,
  IndividualsIndividualIdRoute: IndividualsIndividualIdRoute,
  FamiliesIndexRoute: FamiliesIndexRoute,
  IndividualsIndexRoute: IndividualsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/families/$familyId",
        "/individuals/$individualId",
        "/families/",
        "/individuals/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/families/$familyId": {
      "filePath": "families/$familyId.tsx"
    },
    "/individuals/$individualId": {
      "filePath": "individuals/$individualId.tsx"
    },
    "/families/": {
      "filePath": "families/index.tsx"
    },
    "/individuals/": {
      "filePath": "individuals/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
