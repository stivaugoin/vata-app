---
description: Rules for using DataTable component and sorting functionality (trigger words: table, sort, grid, list)
globs: *.tsx
alwaysApply: false
---
# Rules for using TableData component

## When to use TableData
- Use TableData for displaying any list of data that needs:
  - Server-side pagination
  - Server-side sorting
  - Search/filtering
  - Consistent styling

## Component Structure
- Always import TableData from "@/components/table-data"
- Use the component structure with children components:
  ```tsx
  <TableData>
    <TableData.Toolbar> {/* Optional */}
      <TableData.AddButton /> {/* Optional */}
      <TableData.Search /> {/* Optional */}
      <TableData.SortBy /> {/* Optional */}
    </TableData.Toolbar>

    <TableData.Table />
  </TableData>
  ```

## Required Props
1. `queryKey`: Array of strings/values for React Query cache key
2. `fetchData`: Async function that handles data fetching with the following parameters:
   ```typescript
   {
     globalFilter: string;
     sorting: { id: string; desc: boolean } | null;
     pagination: { pageIndex: number; pageSize: number };
   }
   ```
3. `columns`: Array of column definitions using @tanstack/react-table ColumnDef
4. `defaultSorting`: Optional. Define default sorting with { id: string, desc: boolean }

## Column Definition Rules
- Define columns as ColumnDef array with proper typing
- Each column should have:
  - `accessorKey`: The key to access data
  - `header`: Column header text
  - `size`: Optional width (number)
  - `cell`: Optional custom cell renderer

## Data Fetching Implementation
- Must return an object with:
  ```typescript
  {
    data: T[];
    total: number;
  }
  ```
- Handle sorting using the sorting parameter
- Implement pagination using range
- Handle search/filter if globalFilter is provided

## Best Practices
- One table per view
- Keep column definitions in a separate file when they become complex
- Use semantic column names
- Handle loading and error states (automatically handled by the component)
- Always type your data using proper TypeScript interfaces/types
